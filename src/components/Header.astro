---
import Menu from './Menu.astro'

const navItems = [
  {
    title: 'Proyectos',
    label: 'proyectos',
    url: '/#proyectos',
  },
  {
    title: 'Sobre m√≠',
    label: 'sobre-mi',
    url: '/#sobre-mi',
  },
  {
    title: 'Contacto',
    label: 'contacto',
    url: 'mailto:gabi.qs.mail@gmail.com',
  },
  {
    title: 'CV',
    label: 'CV',
    url: '/gqs_cv.pdf',
    download: true,
  },
]
---

<header
  class="fixed top-0 z-10 flex justify-center w-full h-20 pagew:mt-0" 
> <!--  max-w-[800px] -->
  <nav
    class="flex text-sm font-medium text-white h-20 justify-between items-center w-full px-8 pagew:rounded-none"
  >
    <a href="/">
      <h1 class="text-white text-3xl" id="title">d4er</h1>
    </a>
    <div class="gap-x-10 sm:flex hidden">
      {
        navItems.map((link) => (
          <a
            class="py-2 transition hover:text-yellow-500 text-[1.15rem] "
            aria-label={link.label}
            href={link.url}
            download={link.download ? '' : undefined}
          >
            {link.title}
          </a>
        ))
      }
    </div>
    <Menu />
  </nav>
</header>

<script>
  document.addEventListener('astro:page-load', () => {
    const sections = document.querySelectorAll('section')
    const navItems = document.querySelectorAll('header nav a')

    const callback = (entries: any[]) => {
      entries.forEach((entry) => {
        if (entry.isIntersecting) {
          navItems.forEach((item) => {
            if (item.getAttribute('aria-label') == entry.target.id) {
              item.classList.add('text-blue-500')
            } else {
              item.classList.remove('text-blue-500')
            }
          })
        }
      })
    }

    const observer = new IntersectionObserver(callback, {
      root: null,
      rootMargin: '0px',
      threshold: 0.3,
    })

    sections.forEach((section) => {
      observer.observe(section)
    })

    // Cleanup function
    document.onvisibilitychange = () => {
      if (document.visibilityState === 'hidden') {
        observer.disconnect()
      } else {
        sections.forEach((section) => {
          observer.observe(section)
        })
      }
    }
  })
</script>

<style>
  nav {
    animation: nav-shadown 1s linear both;
    animation-timeline: scroll();
    animation-range: 0 100px;
  }

  nav {
    @apply bg-gray-600/50;
  }

  @keyframes nav-shadown {
    0% {
      @apply bg-white/0;
    }
    to {
      @apply shadow-lg ring-1 backdrop-blur ring-white/10;
    }
  }
</style>
